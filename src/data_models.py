# src/data_models.py
from typing import Optional
from pydantic import BaseModel, Field
from dataclasses import dataclass

@dataclass
class WorkItem:
    """A dataclass to hold all context for a single job."""
    url: str
    message_content: str
    user_name: str

class ProductInfo(BaseModel):
    """
    The structured data contract for all information extracted by the bot.
    This serves as the schema for the LLM's structured output.
    """
    # --- METADATA (Generated by our bot) ---
    processed_timestamp: str = Field(description="The UTC timestamp when processing occurred.")
    requesting_user: str = Field(description="The Discord username of the person who sent the link.")
    source_url: str = Field(description="The original, unmodified URL of the product.")

    # --- CORE PRODUCT INFO (Extracted by LLM from screenshot) ---
    is_captcha: bool = Field(description="Set to true ONLY if the page is a CAPTCHA or blocker page.")
    item_name: Optional[str] = Field(description="The primary name of the product.")
    model_number: Optional[str] = Field(description="The official manufacturer model number or part number.")
    generic_name: Optional[str] = Field(description="A generic, user-friendly name for the item (e.g., 'Wi-Fi Microcontroller').")
    category: Optional[str] = Field(description="A high-level category (e.g., 'Sensor', 'Motor', 'Microcontroller').")
    
    # --- PRICING & AVAILABILITY (Extracted by LLM from screenshot) ---
    price_per_unit: Optional[float] = Field(description="The price for a single unit of the item.")
    is_gst_included: Optional[bool] = Field(description="True if the price includes GST, False if it does not, null if not mentioned.")
    total_cost: Optional[float] = Field(description="The total final cost shown on the page, including taxes if available.")
    availability: Optional[str] = Field(description="Availability status (e.g., 'In Stock', 'Out of Stock', 'Pre-order').")
    estimated_delivery: Optional[str] = Field(description="Estimated delivery time (e.g., '3-5 business days', 'Tomorrow').")
    platform: Optional[str] = Field(description="The website or platform name (e.g., 'Amazon.in', 'Robu.in').")

    # --- USER REQUEST INFO (Extracted by LLM from message text) ---
    quantity_required: Optional[int] = Field(description="The quantity of the item requested by the user in their message.")